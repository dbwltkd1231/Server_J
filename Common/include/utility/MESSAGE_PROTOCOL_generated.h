// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESSAGEPROTOCOL_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_MESSAGEPROTOCOL_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace protocol {

struct REQUEST_CONNECT;
struct REQUEST_CONNECTBuilder;

struct RESPONSE_CONNECT;
struct RESPONSE_CONNECTBuilder;

struct REQUEST_LOGIN;
struct REQUEST_LOGINBuilder;

struct RESPONSE_LOGIN;
struct RESPONSE_LOGINBuilder;

struct REQUEST_LOGOUT;
struct REQUEST_LOGOUTBuilder;

struct RESPONSE_LOGOUT;
struct RESPONSE_LOGOUTBuilder;

struct NOTICE_ACCOUNT;
struct NOTICE_ACCOUNTBuilder;

struct INVENTORY_SLOT;
struct INVENTORY_SLOTBuilder;

struct NOTICE_INVENTORY;
struct NOTICE_INVENTORYBuilder;

struct NOTICE_INVENTORY_UPDATE;
struct NOTICE_INVENTORY_UPDATEBuilder;

struct NOTICE_INVENTORY_DELETED;
struct NOTICE_INVENTORY_DELETEDBuilder;

struct REQUEST_ITEM_BREAK;
struct REQUEST_ITEM_BREAKBuilder;

struct RESPONSE_ITEM_BREAK;
struct RESPONSE_ITEM_BREAKBuilder;

struct REQUEST_HEARTBEAT;
struct REQUEST_HEARTBEATBuilder;

struct RESPONSE_HEARTBEAT;
struct RESPONSE_HEARTBEATBuilder;

struct MESSAGE_PROTOCOL;
struct MESSAGE_PROTOCOLBuilder;

enum MESSAGETYPE : int32_t {
  MESSAGETYPE_BEGIN = 0,
  MESSAGETYPE_REQUEST_CONNECT = 1,
  MESSAGETYPE_RESPONSE_CONNECT = 2,
  MESSAGETYPE_REQUEST_LOGIN = 3,
  MESSAGETYPE_RESPONSE_LOGIN = 4,
  MESSAGETYPE_REQUEST_LOGOUT = 5,
  MESSAGETYPE_RESPONSE_LOGOUT = 6,
  MESSAGETYPE_NOTICE_ACCOUNT = 7,
  MESSAGETYPE_INVENTORY_SLOT = 8,
  MESSAGETYPE_NOTICE_INVENTORY = 9,
  MESSAGETYPE_NOTICE_INVENTORY_UPDATE = 10,
  MESSAGETYPE_NOTICE_INVENTORY_DELETED = 11,
  MESSAGETYPE_REQUEST_ITEM_BREAK = 12,
  MESSAGETYPE_RESPONSE_ITEM_BREAK = 13,
  MESSAGETYPE_REQUEST_HEARTBEAT = 14,
  MESSAGETYPE_RESPONSE_HEARTBEAT = 15,
  MESSAGETYPE_END = 16,
  MESSAGETYPE_MIN = MESSAGETYPE_BEGIN,
  MESSAGETYPE_MAX = MESSAGETYPE_END
};

inline const MESSAGETYPE (&EnumValuesMESSAGETYPE())[17] {
  static const MESSAGETYPE values[] = {
    MESSAGETYPE_BEGIN,
    MESSAGETYPE_REQUEST_CONNECT,
    MESSAGETYPE_RESPONSE_CONNECT,
    MESSAGETYPE_REQUEST_LOGIN,
    MESSAGETYPE_RESPONSE_LOGIN,
    MESSAGETYPE_REQUEST_LOGOUT,
    MESSAGETYPE_RESPONSE_LOGOUT,
    MESSAGETYPE_NOTICE_ACCOUNT,
    MESSAGETYPE_INVENTORY_SLOT,
    MESSAGETYPE_NOTICE_INVENTORY,
    MESSAGETYPE_NOTICE_INVENTORY_UPDATE,
    MESSAGETYPE_NOTICE_INVENTORY_DELETED,
    MESSAGETYPE_REQUEST_ITEM_BREAK,
    MESSAGETYPE_RESPONSE_ITEM_BREAK,
    MESSAGETYPE_REQUEST_HEARTBEAT,
    MESSAGETYPE_RESPONSE_HEARTBEAT,
    MESSAGETYPE_END
  };
  return values;
}

inline const char * const *EnumNamesMESSAGETYPE() {
  static const char * const names[18] = {
    "BEGIN",
    "REQUEST_CONNECT",
    "RESPONSE_CONNECT",
    "REQUEST_LOGIN",
    "RESPONSE_LOGIN",
    "REQUEST_LOGOUT",
    "RESPONSE_LOGOUT",
    "NOTICE_ACCOUNT",
    "INVENTORY_SLOT",
    "NOTICE_INVENTORY",
    "NOTICE_INVENTORY_UPDATE",
    "NOTICE_INVENTORY_DELETED",
    "REQUEST_ITEM_BREAK",
    "RESPONSE_ITEM_BREAK",
    "REQUEST_HEARTBEAT",
    "RESPONSE_HEARTBEAT",
    "END",
    nullptr
  };
  return names;
}

inline const char *EnumNameMESSAGETYPE(MESSAGETYPE e) {
  if (::flatbuffers::IsOutRange(e, MESSAGETYPE_BEGIN, MESSAGETYPE_END)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMESSAGETYPE()[index];
}

enum FEEDBACK_LOGIN : int32_t {
  FEEDBACK_LOGIN_BEGIN = 0,
  FEEDBACK_LOGIN_Success = 1,
  FEEDBACK_LOGIN_Duplicate = 2,
  FEEDBACK_LOGIN_NoAccount = 3,
  FEEDBACK_LOGIN_END = 4,
  FEEDBACK_LOGIN_MIN = FEEDBACK_LOGIN_BEGIN,
  FEEDBACK_LOGIN_MAX = FEEDBACK_LOGIN_END
};

inline const FEEDBACK_LOGIN (&EnumValuesFEEDBACK_LOGIN())[5] {
  static const FEEDBACK_LOGIN values[] = {
    FEEDBACK_LOGIN_BEGIN,
    FEEDBACK_LOGIN_Success,
    FEEDBACK_LOGIN_Duplicate,
    FEEDBACK_LOGIN_NoAccount,
    FEEDBACK_LOGIN_END
  };
  return values;
}

inline const char * const *EnumNamesFEEDBACK_LOGIN() {
  static const char * const names[6] = {
    "BEGIN",
    "Success",
    "Duplicate",
    "NoAccount",
    "END",
    nullptr
  };
  return names;
}

inline const char *EnumNameFEEDBACK_LOGIN(FEEDBACK_LOGIN e) {
  if (::flatbuffers::IsOutRange(e, FEEDBACK_LOGIN_BEGIN, FEEDBACK_LOGIN_END)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFEEDBACK_LOGIN()[index];
}

enum FEEDBACK_LOGOUT : int32_t {
  FEEDBACK_LOGOUT_BEGIN = 0,
  FEEDBACK_LOGOUT_Success = 1,
  FEEDBACK_LOGOUT_NoConnected = 2,
  FEEDBACK_LOGOUT_NoAccount = 3,
  FEEDBACK_LOGOUT_END = 4,
  FEEDBACK_LOGOUT_MIN = FEEDBACK_LOGOUT_BEGIN,
  FEEDBACK_LOGOUT_MAX = FEEDBACK_LOGOUT_END
};

inline const FEEDBACK_LOGOUT (&EnumValuesFEEDBACK_LOGOUT())[5] {
  static const FEEDBACK_LOGOUT values[] = {
    FEEDBACK_LOGOUT_BEGIN,
    FEEDBACK_LOGOUT_Success,
    FEEDBACK_LOGOUT_NoConnected,
    FEEDBACK_LOGOUT_NoAccount,
    FEEDBACK_LOGOUT_END
  };
  return values;
}

inline const char * const *EnumNamesFEEDBACK_LOGOUT() {
  static const char * const names[6] = {
    "BEGIN",
    "Success",
    "NoConnected",
    "NoAccount",
    "END",
    nullptr
  };
  return names;
}

inline const char *EnumNameFEEDBACK_LOGOUT(FEEDBACK_LOGOUT e) {
  if (::flatbuffers::IsOutRange(e, FEEDBACK_LOGOUT_BEGIN, FEEDBACK_LOGOUT_END)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesFEEDBACK_LOGOUT()[index];
}

enum MessageContent : uint8_t {
  MessageContent_NONE = 0,
  MessageContent_REQUEST_CONNECT = 1,
  MessageContent_RESPONSE_CONNECT = 2,
  MessageContent_REQUEST_LOGIN = 3,
  MessageContent_RESPONSE_LOGIN = 4,
  MessageContent_NOTICE_ACCOUNT = 5,
  MessageContent_INVENTORY_SLOT = 6,
  MessageContent_NOTICE_INVENTORY = 7,
  MessageContent_NOTICE_INVENTORY_UPDATE = 8,
  MessageContent_NOTICE_INVENTORY_DELETED = 9,
  MessageContent_REQUEST_ITEM_BREAK = 10,
  MessageContent_RESPONSE_ITEM_BREAK = 11,
  MessageContent_REQUEST_HEARTBEAT = 12,
  MessageContent_RESPONSE_HEARTBEAT = 13,
  MessageContent_MIN = MessageContent_NONE,
  MessageContent_MAX = MessageContent_RESPONSE_HEARTBEAT
};

inline const MessageContent (&EnumValuesMessageContent())[14] {
  static const MessageContent values[] = {
    MessageContent_NONE,
    MessageContent_REQUEST_CONNECT,
    MessageContent_RESPONSE_CONNECT,
    MessageContent_REQUEST_LOGIN,
    MessageContent_RESPONSE_LOGIN,
    MessageContent_NOTICE_ACCOUNT,
    MessageContent_INVENTORY_SLOT,
    MessageContent_NOTICE_INVENTORY,
    MessageContent_NOTICE_INVENTORY_UPDATE,
    MessageContent_NOTICE_INVENTORY_DELETED,
    MessageContent_REQUEST_ITEM_BREAK,
    MessageContent_RESPONSE_ITEM_BREAK,
    MessageContent_REQUEST_HEARTBEAT,
    MessageContent_RESPONSE_HEARTBEAT
  };
  return values;
}

inline const char * const *EnumNamesMessageContent() {
  static const char * const names[15] = {
    "NONE",
    "REQUEST_CONNECT",
    "RESPONSE_CONNECT",
    "REQUEST_LOGIN",
    "RESPONSE_LOGIN",
    "NOTICE_ACCOUNT",
    "INVENTORY_SLOT",
    "NOTICE_INVENTORY",
    "NOTICE_INVENTORY_UPDATE",
    "NOTICE_INVENTORY_DELETED",
    "REQUEST_ITEM_BREAK",
    "RESPONSE_ITEM_BREAK",
    "REQUEST_HEARTBEAT",
    "RESPONSE_HEARTBEAT",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageContent(MessageContent e) {
  if (::flatbuffers::IsOutRange(e, MessageContent_NONE, MessageContent_RESPONSE_HEARTBEAT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageContent()[index];
}

template<typename T> struct MessageContentTraits {
  static const MessageContent enum_value = MessageContent_NONE;
};

template<> struct MessageContentTraits<protocol::REQUEST_CONNECT> {
  static const MessageContent enum_value = MessageContent_REQUEST_CONNECT;
};

template<> struct MessageContentTraits<protocol::RESPONSE_CONNECT> {
  static const MessageContent enum_value = MessageContent_RESPONSE_CONNECT;
};

template<> struct MessageContentTraits<protocol::REQUEST_LOGIN> {
  static const MessageContent enum_value = MessageContent_REQUEST_LOGIN;
};

template<> struct MessageContentTraits<protocol::RESPONSE_LOGIN> {
  static const MessageContent enum_value = MessageContent_RESPONSE_LOGIN;
};

template<> struct MessageContentTraits<protocol::NOTICE_ACCOUNT> {
  static const MessageContent enum_value = MessageContent_NOTICE_ACCOUNT;
};

template<> struct MessageContentTraits<protocol::INVENTORY_SLOT> {
  static const MessageContent enum_value = MessageContent_INVENTORY_SLOT;
};

template<> struct MessageContentTraits<protocol::NOTICE_INVENTORY> {
  static const MessageContent enum_value = MessageContent_NOTICE_INVENTORY;
};

template<> struct MessageContentTraits<protocol::NOTICE_INVENTORY_UPDATE> {
  static const MessageContent enum_value = MessageContent_NOTICE_INVENTORY_UPDATE;
};

template<> struct MessageContentTraits<protocol::NOTICE_INVENTORY_DELETED> {
  static const MessageContent enum_value = MessageContent_NOTICE_INVENTORY_DELETED;
};

template<> struct MessageContentTraits<protocol::REQUEST_ITEM_BREAK> {
  static const MessageContent enum_value = MessageContent_REQUEST_ITEM_BREAK;
};

template<> struct MessageContentTraits<protocol::RESPONSE_ITEM_BREAK> {
  static const MessageContent enum_value = MessageContent_RESPONSE_ITEM_BREAK;
};

template<> struct MessageContentTraits<protocol::REQUEST_HEARTBEAT> {
  static const MessageContent enum_value = MessageContent_REQUEST_HEARTBEAT;
};

template<> struct MessageContentTraits<protocol::RESPONSE_HEARTBEAT> {
  static const MessageContent enum_value = MessageContent_RESPONSE_HEARTBEAT;
};

bool VerifyMessageContent(::flatbuffers::Verifier &verifier, const void *obj, MessageContent type);
bool VerifyMessageContentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct REQUEST_CONNECT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_CONNECTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOGIN_ID = 4
  };
  const ::flatbuffers::String *login_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LOGIN_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LOGIN_ID) &&
           verifier.VerifyString(login_id()) &&
           verifier.EndTable();
  }
};

struct REQUEST_CONNECTBuilder {
  typedef REQUEST_CONNECT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_login_id(::flatbuffers::Offset<::flatbuffers::String> login_id) {
    fbb_.AddOffset(REQUEST_CONNECT::VT_LOGIN_ID, login_id);
  }
  explicit REQUEST_CONNECTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_CONNECT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_CONNECT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_CONNECT> CreateREQUEST_CONNECT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> login_id = 0) {
  REQUEST_CONNECTBuilder builder_(_fbb);
  builder_.add_login_id(login_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<REQUEST_CONNECT> CreateREQUEST_CONNECTDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *login_id = nullptr) {
  auto login_id__ = login_id ? _fbb.CreateString(login_id) : 0;
  return protocol::CreateREQUEST_CONNECT(
      _fbb,
      login_id__);
}

struct RESPONSE_CONNECT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_CONNECTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNT_NUMBER = 4,
    VT_LOGIN_ID = 6,
    VT_ID_NEW = 8,
    VT_AUTH_TOKEN = 10,
    VT_LOBY_PORT = 12
  };
  int64_t account_number() const {
    return GetField<int64_t>(VT_ACCOUNT_NUMBER, 0);
  }
  const ::flatbuffers::String *login_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LOGIN_ID);
  }
  bool id_new() const {
    return GetField<uint8_t>(VT_ID_NEW, 0) != 0;
  }
  const ::flatbuffers::String *auth_token() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AUTH_TOKEN);
  }
  int32_t loby_port() const {
    return GetField<int32_t>(VT_LOBY_PORT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ACCOUNT_NUMBER, 8) &&
           VerifyOffset(verifier, VT_LOGIN_ID) &&
           verifier.VerifyString(login_id()) &&
           VerifyField<uint8_t>(verifier, VT_ID_NEW, 1) &&
           VerifyOffset(verifier, VT_AUTH_TOKEN) &&
           verifier.VerifyString(auth_token()) &&
           VerifyField<int32_t>(verifier, VT_LOBY_PORT, 4) &&
           verifier.EndTable();
  }
};

struct RESPONSE_CONNECTBuilder {
  typedef RESPONSE_CONNECT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_account_number(int64_t account_number) {
    fbb_.AddElement<int64_t>(RESPONSE_CONNECT::VT_ACCOUNT_NUMBER, account_number, 0);
  }
  void add_login_id(::flatbuffers::Offset<::flatbuffers::String> login_id) {
    fbb_.AddOffset(RESPONSE_CONNECT::VT_LOGIN_ID, login_id);
  }
  void add_id_new(bool id_new) {
    fbb_.AddElement<uint8_t>(RESPONSE_CONNECT::VT_ID_NEW, static_cast<uint8_t>(id_new), 0);
  }
  void add_auth_token(::flatbuffers::Offset<::flatbuffers::String> auth_token) {
    fbb_.AddOffset(RESPONSE_CONNECT::VT_AUTH_TOKEN, auth_token);
  }
  void add_loby_port(int32_t loby_port) {
    fbb_.AddElement<int32_t>(RESPONSE_CONNECT::VT_LOBY_PORT, loby_port, 0);
  }
  explicit RESPONSE_CONNECTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_CONNECT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_CONNECT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_CONNECT> CreateRESPONSE_CONNECT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t account_number = 0,
    ::flatbuffers::Offset<::flatbuffers::String> login_id = 0,
    bool id_new = false,
    ::flatbuffers::Offset<::flatbuffers::String> auth_token = 0,
    int32_t loby_port = 0) {
  RESPONSE_CONNECTBuilder builder_(_fbb);
  builder_.add_account_number(account_number);
  builder_.add_loby_port(loby_port);
  builder_.add_auth_token(auth_token);
  builder_.add_login_id(login_id);
  builder_.add_id_new(id_new);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RESPONSE_CONNECT> CreateRESPONSE_CONNECTDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t account_number = 0,
    const char *login_id = nullptr,
    bool id_new = false,
    const char *auth_token = nullptr,
    int32_t loby_port = 0) {
  auto login_id__ = login_id ? _fbb.CreateString(login_id) : 0;
  auto auth_token__ = auth_token ? _fbb.CreateString(auth_token) : 0;
  return protocol::CreateRESPONSE_CONNECT(
      _fbb,
      account_number,
      login_id__,
      id_new,
      auth_token__,
      loby_port);
}

struct REQUEST_LOGIN FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_LOGINBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNT_NUMBER = 4,
    VT_AUTH_TOKEN = 6
  };
  int64_t account_number() const {
    return GetField<int64_t>(VT_ACCOUNT_NUMBER, 0);
  }
  const ::flatbuffers::String *auth_token() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AUTH_TOKEN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ACCOUNT_NUMBER, 8) &&
           VerifyOffset(verifier, VT_AUTH_TOKEN) &&
           verifier.VerifyString(auth_token()) &&
           verifier.EndTable();
  }
};

struct REQUEST_LOGINBuilder {
  typedef REQUEST_LOGIN Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_account_number(int64_t account_number) {
    fbb_.AddElement<int64_t>(REQUEST_LOGIN::VT_ACCOUNT_NUMBER, account_number, 0);
  }
  void add_auth_token(::flatbuffers::Offset<::flatbuffers::String> auth_token) {
    fbb_.AddOffset(REQUEST_LOGIN::VT_AUTH_TOKEN, auth_token);
  }
  explicit REQUEST_LOGINBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_LOGIN> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_LOGIN>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_LOGIN> CreateREQUEST_LOGIN(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t account_number = 0,
    ::flatbuffers::Offset<::flatbuffers::String> auth_token = 0) {
  REQUEST_LOGINBuilder builder_(_fbb);
  builder_.add_account_number(account_number);
  builder_.add_auth_token(auth_token);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<REQUEST_LOGIN> CreateREQUEST_LOGINDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t account_number = 0,
    const char *auth_token = nullptr) {
  auto auth_token__ = auth_token ? _fbb.CreateString(auth_token) : 0;
  return protocol::CreateREQUEST_LOGIN(
      _fbb,
      account_number,
      auth_token__);
}

struct RESPONSE_LOGIN FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_LOGINBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DETAIL = 4,
    VT_FEEDBACK = 6
  };
  protocol::FEEDBACK_LOGIN detail() const {
    return static_cast<protocol::FEEDBACK_LOGIN>(GetField<int32_t>(VT_DETAIL, 0));
  }
  bool feedback() const {
    return GetField<uint8_t>(VT_FEEDBACK, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_DETAIL, 4) &&
           VerifyField<uint8_t>(verifier, VT_FEEDBACK, 1) &&
           verifier.EndTable();
  }
};

struct RESPONSE_LOGINBuilder {
  typedef RESPONSE_LOGIN Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_detail(protocol::FEEDBACK_LOGIN detail) {
    fbb_.AddElement<int32_t>(RESPONSE_LOGIN::VT_DETAIL, static_cast<int32_t>(detail), 0);
  }
  void add_feedback(bool feedback) {
    fbb_.AddElement<uint8_t>(RESPONSE_LOGIN::VT_FEEDBACK, static_cast<uint8_t>(feedback), 0);
  }
  explicit RESPONSE_LOGINBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_LOGIN> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_LOGIN>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_LOGIN> CreateRESPONSE_LOGIN(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    protocol::FEEDBACK_LOGIN detail = protocol::FEEDBACK_LOGIN_BEGIN,
    bool feedback = false) {
  RESPONSE_LOGINBuilder builder_(_fbb);
  builder_.add_detail(detail);
  builder_.add_feedback(feedback);
  return builder_.Finish();
}

struct REQUEST_LOGOUT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_LOGOUTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCOUNT_NUMBER = 4
  };
  int64_t account_number() const {
    return GetField<int64_t>(VT_ACCOUNT_NUMBER, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ACCOUNT_NUMBER, 8) &&
           verifier.EndTable();
  }
};

struct REQUEST_LOGOUTBuilder {
  typedef REQUEST_LOGOUT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_account_number(int64_t account_number) {
    fbb_.AddElement<int64_t>(REQUEST_LOGOUT::VT_ACCOUNT_NUMBER, account_number, 0);
  }
  explicit REQUEST_LOGOUTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_LOGOUT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_LOGOUT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_LOGOUT> CreateREQUEST_LOGOUT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int64_t account_number = 0) {
  REQUEST_LOGOUTBuilder builder_(_fbb);
  builder_.add_account_number(account_number);
  return builder_.Finish();
}

struct RESPONSE_LOGOUT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_LOGOUTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DETAIL = 4,
    VT_FEEDBACK = 6
  };
  protocol::FEEDBACK_LOGOUT detail() const {
    return static_cast<protocol::FEEDBACK_LOGOUT>(GetField<int32_t>(VT_DETAIL, 0));
  }
  int32_t feedback() const {
    return GetField<int32_t>(VT_FEEDBACK, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_DETAIL, 4) &&
           VerifyField<int32_t>(verifier, VT_FEEDBACK, 4) &&
           verifier.EndTable();
  }
};

struct RESPONSE_LOGOUTBuilder {
  typedef RESPONSE_LOGOUT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_detail(protocol::FEEDBACK_LOGOUT detail) {
    fbb_.AddElement<int32_t>(RESPONSE_LOGOUT::VT_DETAIL, static_cast<int32_t>(detail), 0);
  }
  void add_feedback(int32_t feedback) {
    fbb_.AddElement<int32_t>(RESPONSE_LOGOUT::VT_FEEDBACK, feedback, 0);
  }
  explicit RESPONSE_LOGOUTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_LOGOUT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_LOGOUT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_LOGOUT> CreateRESPONSE_LOGOUT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    protocol::FEEDBACK_LOGOUT detail = protocol::FEEDBACK_LOGOUT_BEGIN,
    int32_t feedback = 0) {
  RESPONSE_LOGOUTBuilder builder_(_fbb);
  builder_.add_feedback(feedback);
  builder_.add_detail(detail);
  return builder_.Finish();
}

struct NOTICE_ACCOUNT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NOTICE_ACCOUNTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USER_ID = 4,
    VT_MONEY = 6,
    VT_RANKING = 8,
    VT_INVENTORY_CAPACITY = 10
  };
  const ::flatbuffers::String *user_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER_ID);
  }
  int64_t money() const {
    return GetField<int64_t>(VT_MONEY, 0);
  }
  int32_t ranking() const {
    return GetField<int32_t>(VT_RANKING, 0);
  }
  int32_t inventory_capacity() const {
    return GetField<int32_t>(VT_INVENTORY_CAPACITY, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USER_ID) &&
           verifier.VerifyString(user_id()) &&
           VerifyField<int64_t>(verifier, VT_MONEY, 8) &&
           VerifyField<int32_t>(verifier, VT_RANKING, 4) &&
           VerifyField<int32_t>(verifier, VT_INVENTORY_CAPACITY, 4) &&
           verifier.EndTable();
  }
};

struct NOTICE_ACCOUNTBuilder {
  typedef NOTICE_ACCOUNT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_user_id(::flatbuffers::Offset<::flatbuffers::String> user_id) {
    fbb_.AddOffset(NOTICE_ACCOUNT::VT_USER_ID, user_id);
  }
  void add_money(int64_t money) {
    fbb_.AddElement<int64_t>(NOTICE_ACCOUNT::VT_MONEY, money, 0);
  }
  void add_ranking(int32_t ranking) {
    fbb_.AddElement<int32_t>(NOTICE_ACCOUNT::VT_RANKING, ranking, 0);
  }
  void add_inventory_capacity(int32_t inventory_capacity) {
    fbb_.AddElement<int32_t>(NOTICE_ACCOUNT::VT_INVENTORY_CAPACITY, inventory_capacity, 0);
  }
  explicit NOTICE_ACCOUNTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NOTICE_ACCOUNT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NOTICE_ACCOUNT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NOTICE_ACCOUNT> CreateNOTICE_ACCOUNT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> user_id = 0,
    int64_t money = 0,
    int32_t ranking = 0,
    int32_t inventory_capacity = 0) {
  NOTICE_ACCOUNTBuilder builder_(_fbb);
  builder_.add_money(money);
  builder_.add_inventory_capacity(inventory_capacity);
  builder_.add_ranking(ranking);
  builder_.add_user_id(user_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NOTICE_ACCOUNT> CreateNOTICE_ACCOUNTDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *user_id = nullptr,
    int64_t money = 0,
    int32_t ranking = 0,
    int32_t inventory_capacity = 0) {
  auto user_id__ = user_id ? _fbb.CreateString(user_id) : 0;
  return protocol::CreateNOTICE_ACCOUNT(
      _fbb,
      user_id__,
      money,
      ranking,
      inventory_capacity);
}

struct INVENTORY_SLOT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef INVENTORY_SLOTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GUID = 4,
    VT_COUNT = 6
  };
  const ::flatbuffers::String *guid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GUID);
  }
  int32_t count() const {
    return GetField<int32_t>(VT_COUNT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GUID) &&
           verifier.VerifyString(guid()) &&
           VerifyField<int32_t>(verifier, VT_COUNT, 4) &&
           verifier.EndTable();
  }
};

struct INVENTORY_SLOTBuilder {
  typedef INVENTORY_SLOT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_guid(::flatbuffers::Offset<::flatbuffers::String> guid) {
    fbb_.AddOffset(INVENTORY_SLOT::VT_GUID, guid);
  }
  void add_count(int32_t count) {
    fbb_.AddElement<int32_t>(INVENTORY_SLOT::VT_COUNT, count, 0);
  }
  explicit INVENTORY_SLOTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<INVENTORY_SLOT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<INVENTORY_SLOT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<INVENTORY_SLOT> CreateINVENTORY_SLOT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> guid = 0,
    int32_t count = 0) {
  INVENTORY_SLOTBuilder builder_(_fbb);
  builder_.add_count(count);
  builder_.add_guid(guid);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<INVENTORY_SLOT> CreateINVENTORY_SLOTDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *guid = nullptr,
    int32_t count = 0) {
  auto guid__ = guid ? _fbb.CreateString(guid) : 0;
  return protocol::CreateINVENTORY_SLOT(
      _fbb,
      guid__,
      count);
}

struct NOTICE_INVENTORY FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NOTICE_INVENTORYBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INVENTORY_SLOTS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<protocol::INVENTORY_SLOT>> *inventory_slots() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<protocol::INVENTORY_SLOT>> *>(VT_INVENTORY_SLOTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INVENTORY_SLOTS) &&
           verifier.VerifyVector(inventory_slots()) &&
           verifier.VerifyVectorOfTables(inventory_slots()) &&
           verifier.EndTable();
  }
};

struct NOTICE_INVENTORYBuilder {
  typedef NOTICE_INVENTORY Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_inventory_slots(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<protocol::INVENTORY_SLOT>>> inventory_slots) {
    fbb_.AddOffset(NOTICE_INVENTORY::VT_INVENTORY_SLOTS, inventory_slots);
  }
  explicit NOTICE_INVENTORYBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NOTICE_INVENTORY> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NOTICE_INVENTORY>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NOTICE_INVENTORY> CreateNOTICE_INVENTORY(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<protocol::INVENTORY_SLOT>>> inventory_slots = 0) {
  NOTICE_INVENTORYBuilder builder_(_fbb);
  builder_.add_inventory_slots(inventory_slots);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NOTICE_INVENTORY> CreateNOTICE_INVENTORYDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<protocol::INVENTORY_SLOT>> *inventory_slots = nullptr) {
  auto inventory_slots__ = inventory_slots ? _fbb.CreateVector<::flatbuffers::Offset<protocol::INVENTORY_SLOT>>(*inventory_slots) : 0;
  return protocol::CreateNOTICE_INVENTORY(
      _fbb,
      inventory_slots__);
}

struct NOTICE_INVENTORY_UPDATE FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NOTICE_INVENTORY_UPDATEBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INVENTORY_SLOT = 4
  };
  const protocol::INVENTORY_SLOT *inventory_slot() const {
    return GetPointer<const protocol::INVENTORY_SLOT *>(VT_INVENTORY_SLOT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INVENTORY_SLOT) &&
           verifier.VerifyTable(inventory_slot()) &&
           verifier.EndTable();
  }
};

struct NOTICE_INVENTORY_UPDATEBuilder {
  typedef NOTICE_INVENTORY_UPDATE Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_inventory_slot(::flatbuffers::Offset<protocol::INVENTORY_SLOT> inventory_slot) {
    fbb_.AddOffset(NOTICE_INVENTORY_UPDATE::VT_INVENTORY_SLOT, inventory_slot);
  }
  explicit NOTICE_INVENTORY_UPDATEBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NOTICE_INVENTORY_UPDATE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NOTICE_INVENTORY_UPDATE>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NOTICE_INVENTORY_UPDATE> CreateNOTICE_INVENTORY_UPDATE(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<protocol::INVENTORY_SLOT> inventory_slot = 0) {
  NOTICE_INVENTORY_UPDATEBuilder builder_(_fbb);
  builder_.add_inventory_slot(inventory_slot);
  return builder_.Finish();
}

struct NOTICE_INVENTORY_DELETED FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef NOTICE_INVENTORY_DELETEDBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GUID = 4
  };
  const ::flatbuffers::String *guid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GUID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GUID) &&
           verifier.VerifyString(guid()) &&
           verifier.EndTable();
  }
};

struct NOTICE_INVENTORY_DELETEDBuilder {
  typedef NOTICE_INVENTORY_DELETED Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_guid(::flatbuffers::Offset<::flatbuffers::String> guid) {
    fbb_.AddOffset(NOTICE_INVENTORY_DELETED::VT_GUID, guid);
  }
  explicit NOTICE_INVENTORY_DELETEDBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<NOTICE_INVENTORY_DELETED> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<NOTICE_INVENTORY_DELETED>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<NOTICE_INVENTORY_DELETED> CreateNOTICE_INVENTORY_DELETED(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> guid = 0) {
  NOTICE_INVENTORY_DELETEDBuilder builder_(_fbb);
  builder_.add_guid(guid);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<NOTICE_INVENTORY_DELETED> CreateNOTICE_INVENTORY_DELETEDDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *guid = nullptr) {
  auto guid__ = guid ? _fbb.CreateString(guid) : 0;
  return protocol::CreateNOTICE_INVENTORY_DELETED(
      _fbb,
      guid__);
}

struct REQUEST_ITEM_BREAK FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_ITEM_BREAKBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GUID = 4,
    VT_COUNT = 6
  };
  const ::flatbuffers::String *guid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GUID);
  }
  int32_t count() const {
    return GetField<int32_t>(VT_COUNT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GUID) &&
           verifier.VerifyString(guid()) &&
           VerifyField<int32_t>(verifier, VT_COUNT, 4) &&
           verifier.EndTable();
  }
};

struct REQUEST_ITEM_BREAKBuilder {
  typedef REQUEST_ITEM_BREAK Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_guid(::flatbuffers::Offset<::flatbuffers::String> guid) {
    fbb_.AddOffset(REQUEST_ITEM_BREAK::VT_GUID, guid);
  }
  void add_count(int32_t count) {
    fbb_.AddElement<int32_t>(REQUEST_ITEM_BREAK::VT_COUNT, count, 0);
  }
  explicit REQUEST_ITEM_BREAKBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_ITEM_BREAK> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_ITEM_BREAK>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_ITEM_BREAK> CreateREQUEST_ITEM_BREAK(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> guid = 0,
    int32_t count = 0) {
  REQUEST_ITEM_BREAKBuilder builder_(_fbb);
  builder_.add_count(count);
  builder_.add_guid(guid);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<REQUEST_ITEM_BREAK> CreateREQUEST_ITEM_BREAKDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *guid = nullptr,
    int32_t count = 0) {
  auto guid__ = guid ? _fbb.CreateString(guid) : 0;
  return protocol::CreateREQUEST_ITEM_BREAK(
      _fbb,
      guid__,
      count);
}

struct RESPONSE_ITEM_BREAK FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_ITEM_BREAKBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FEEDBACK = 4
  };
  bool feedback() const {
    return GetField<uint8_t>(VT_FEEDBACK, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_FEEDBACK, 1) &&
           verifier.EndTable();
  }
};

struct RESPONSE_ITEM_BREAKBuilder {
  typedef RESPONSE_ITEM_BREAK Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_feedback(bool feedback) {
    fbb_.AddElement<uint8_t>(RESPONSE_ITEM_BREAK::VT_FEEDBACK, static_cast<uint8_t>(feedback), 0);
  }
  explicit RESPONSE_ITEM_BREAKBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_ITEM_BREAK> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_ITEM_BREAK>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_ITEM_BREAK> CreateRESPONSE_ITEM_BREAK(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool feedback = false) {
  RESPONSE_ITEM_BREAKBuilder builder_(_fbb);
  builder_.add_feedback(feedback);
  return builder_.Finish();
}

struct REQUEST_HEARTBEAT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_HEARTBEATBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct REQUEST_HEARTBEATBuilder {
  typedef REQUEST_HEARTBEAT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit REQUEST_HEARTBEATBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_HEARTBEAT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_HEARTBEAT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_HEARTBEAT> CreateREQUEST_HEARTBEAT(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  REQUEST_HEARTBEATBuilder builder_(_fbb);
  return builder_.Finish();
}

struct RESPONSE_HEARTBEAT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_HEARTBEATBuilder Builder;
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct RESPONSE_HEARTBEATBuilder {
  typedef RESPONSE_HEARTBEAT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  explicit RESPONSE_HEARTBEATBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_HEARTBEAT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_HEARTBEAT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_HEARTBEAT> CreateRESPONSE_HEARTBEAT(
    ::flatbuffers::FlatBufferBuilder &_fbb) {
  RESPONSE_HEARTBEATBuilder builder_(_fbb);
  return builder_.Finish();
}

struct MESSAGE_PROTOCOL FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MESSAGE_PROTOCOLBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_TYPE = 4,
    VT_CONTENT_TYPE = 6,
    VT_CONTENT = 8
  };
  protocol::MESSAGETYPE message_type() const {
    return static_cast<protocol::MESSAGETYPE>(GetField<int32_t>(VT_MESSAGE_TYPE, 0));
  }
  protocol::MessageContent content_type() const {
    return static_cast<protocol::MessageContent>(GetField<uint8_t>(VT_CONTENT_TYPE, 0));
  }
  const void *content() const {
    return GetPointer<const void *>(VT_CONTENT);
  }
  template<typename T> const T *content_as() const;
  const protocol::REQUEST_CONNECT *content_as_REQUEST_CONNECT() const {
    return content_type() == protocol::MessageContent_REQUEST_CONNECT ? static_cast<const protocol::REQUEST_CONNECT *>(content()) : nullptr;
  }
  const protocol::RESPONSE_CONNECT *content_as_RESPONSE_CONNECT() const {
    return content_type() == protocol::MessageContent_RESPONSE_CONNECT ? static_cast<const protocol::RESPONSE_CONNECT *>(content()) : nullptr;
  }
  const protocol::REQUEST_LOGIN *content_as_REQUEST_LOGIN() const {
    return content_type() == protocol::MessageContent_REQUEST_LOGIN ? static_cast<const protocol::REQUEST_LOGIN *>(content()) : nullptr;
  }
  const protocol::RESPONSE_LOGIN *content_as_RESPONSE_LOGIN() const {
    return content_type() == protocol::MessageContent_RESPONSE_LOGIN ? static_cast<const protocol::RESPONSE_LOGIN *>(content()) : nullptr;
  }
  const protocol::NOTICE_ACCOUNT *content_as_NOTICE_ACCOUNT() const {
    return content_type() == protocol::MessageContent_NOTICE_ACCOUNT ? static_cast<const protocol::NOTICE_ACCOUNT *>(content()) : nullptr;
  }
  const protocol::INVENTORY_SLOT *content_as_INVENTORY_SLOT() const {
    return content_type() == protocol::MessageContent_INVENTORY_SLOT ? static_cast<const protocol::INVENTORY_SLOT *>(content()) : nullptr;
  }
  const protocol::NOTICE_INVENTORY *content_as_NOTICE_INVENTORY() const {
    return content_type() == protocol::MessageContent_NOTICE_INVENTORY ? static_cast<const protocol::NOTICE_INVENTORY *>(content()) : nullptr;
  }
  const protocol::NOTICE_INVENTORY_UPDATE *content_as_NOTICE_INVENTORY_UPDATE() const {
    return content_type() == protocol::MessageContent_NOTICE_INVENTORY_UPDATE ? static_cast<const protocol::NOTICE_INVENTORY_UPDATE *>(content()) : nullptr;
  }
  const protocol::NOTICE_INVENTORY_DELETED *content_as_NOTICE_INVENTORY_DELETED() const {
    return content_type() == protocol::MessageContent_NOTICE_INVENTORY_DELETED ? static_cast<const protocol::NOTICE_INVENTORY_DELETED *>(content()) : nullptr;
  }
  const protocol::REQUEST_ITEM_BREAK *content_as_REQUEST_ITEM_BREAK() const {
    return content_type() == protocol::MessageContent_REQUEST_ITEM_BREAK ? static_cast<const protocol::REQUEST_ITEM_BREAK *>(content()) : nullptr;
  }
  const protocol::RESPONSE_ITEM_BREAK *content_as_RESPONSE_ITEM_BREAK() const {
    return content_type() == protocol::MessageContent_RESPONSE_ITEM_BREAK ? static_cast<const protocol::RESPONSE_ITEM_BREAK *>(content()) : nullptr;
  }
  const protocol::REQUEST_HEARTBEAT *content_as_REQUEST_HEARTBEAT() const {
    return content_type() == protocol::MessageContent_REQUEST_HEARTBEAT ? static_cast<const protocol::REQUEST_HEARTBEAT *>(content()) : nullptr;
  }
  const protocol::RESPONSE_HEARTBEAT *content_as_RESPONSE_HEARTBEAT() const {
    return content_type() == protocol::MessageContent_RESPONSE_HEARTBEAT ? static_cast<const protocol::RESPONSE_HEARTBEAT *>(content()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MESSAGE_TYPE, 4) &&
           VerifyField<uint8_t>(verifier, VT_CONTENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           VerifyMessageContent(verifier, content(), content_type()) &&
           verifier.EndTable();
  }
};

template<> inline const protocol::REQUEST_CONNECT *MESSAGE_PROTOCOL::content_as<protocol::REQUEST_CONNECT>() const {
  return content_as_REQUEST_CONNECT();
}

template<> inline const protocol::RESPONSE_CONNECT *MESSAGE_PROTOCOL::content_as<protocol::RESPONSE_CONNECT>() const {
  return content_as_RESPONSE_CONNECT();
}

template<> inline const protocol::REQUEST_LOGIN *MESSAGE_PROTOCOL::content_as<protocol::REQUEST_LOGIN>() const {
  return content_as_REQUEST_LOGIN();
}

template<> inline const protocol::RESPONSE_LOGIN *MESSAGE_PROTOCOL::content_as<protocol::RESPONSE_LOGIN>() const {
  return content_as_RESPONSE_LOGIN();
}

template<> inline const protocol::NOTICE_ACCOUNT *MESSAGE_PROTOCOL::content_as<protocol::NOTICE_ACCOUNT>() const {
  return content_as_NOTICE_ACCOUNT();
}

template<> inline const protocol::INVENTORY_SLOT *MESSAGE_PROTOCOL::content_as<protocol::INVENTORY_SLOT>() const {
  return content_as_INVENTORY_SLOT();
}

template<> inline const protocol::NOTICE_INVENTORY *MESSAGE_PROTOCOL::content_as<protocol::NOTICE_INVENTORY>() const {
  return content_as_NOTICE_INVENTORY();
}

template<> inline const protocol::NOTICE_INVENTORY_UPDATE *MESSAGE_PROTOCOL::content_as<protocol::NOTICE_INVENTORY_UPDATE>() const {
  return content_as_NOTICE_INVENTORY_UPDATE();
}

template<> inline const protocol::NOTICE_INVENTORY_DELETED *MESSAGE_PROTOCOL::content_as<protocol::NOTICE_INVENTORY_DELETED>() const {
  return content_as_NOTICE_INVENTORY_DELETED();
}

template<> inline const protocol::REQUEST_ITEM_BREAK *MESSAGE_PROTOCOL::content_as<protocol::REQUEST_ITEM_BREAK>() const {
  return content_as_REQUEST_ITEM_BREAK();
}

template<> inline const protocol::RESPONSE_ITEM_BREAK *MESSAGE_PROTOCOL::content_as<protocol::RESPONSE_ITEM_BREAK>() const {
  return content_as_RESPONSE_ITEM_BREAK();
}

template<> inline const protocol::REQUEST_HEARTBEAT *MESSAGE_PROTOCOL::content_as<protocol::REQUEST_HEARTBEAT>() const {
  return content_as_REQUEST_HEARTBEAT();
}

template<> inline const protocol::RESPONSE_HEARTBEAT *MESSAGE_PROTOCOL::content_as<protocol::RESPONSE_HEARTBEAT>() const {
  return content_as_RESPONSE_HEARTBEAT();
}

struct MESSAGE_PROTOCOLBuilder {
  typedef MESSAGE_PROTOCOL Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message_type(protocol::MESSAGETYPE message_type) {
    fbb_.AddElement<int32_t>(MESSAGE_PROTOCOL::VT_MESSAGE_TYPE, static_cast<int32_t>(message_type), 0);
  }
  void add_content_type(protocol::MessageContent content_type) {
    fbb_.AddElement<uint8_t>(MESSAGE_PROTOCOL::VT_CONTENT_TYPE, static_cast<uint8_t>(content_type), 0);
  }
  void add_content(::flatbuffers::Offset<void> content) {
    fbb_.AddOffset(MESSAGE_PROTOCOL::VT_CONTENT, content);
  }
  explicit MESSAGE_PROTOCOLBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MESSAGE_PROTOCOL> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MESSAGE_PROTOCOL>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MESSAGE_PROTOCOL> CreateMESSAGE_PROTOCOL(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    protocol::MESSAGETYPE message_type = protocol::MESSAGETYPE_BEGIN,
    protocol::MessageContent content_type = protocol::MessageContent_NONE,
    ::flatbuffers::Offset<void> content = 0) {
  MESSAGE_PROTOCOLBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_message_type(message_type);
  builder_.add_content_type(content_type);
  return builder_.Finish();
}

inline bool VerifyMessageContent(::flatbuffers::Verifier &verifier, const void *obj, MessageContent type) {
  switch (type) {
    case MessageContent_NONE: {
      return true;
    }
    case MessageContent_REQUEST_CONNECT: {
      auto ptr = reinterpret_cast<const protocol::REQUEST_CONNECT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_RESPONSE_CONNECT: {
      auto ptr = reinterpret_cast<const protocol::RESPONSE_CONNECT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_REQUEST_LOGIN: {
      auto ptr = reinterpret_cast<const protocol::REQUEST_LOGIN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_RESPONSE_LOGIN: {
      auto ptr = reinterpret_cast<const protocol::RESPONSE_LOGIN *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_NOTICE_ACCOUNT: {
      auto ptr = reinterpret_cast<const protocol::NOTICE_ACCOUNT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_INVENTORY_SLOT: {
      auto ptr = reinterpret_cast<const protocol::INVENTORY_SLOT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_NOTICE_INVENTORY: {
      auto ptr = reinterpret_cast<const protocol::NOTICE_INVENTORY *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_NOTICE_INVENTORY_UPDATE: {
      auto ptr = reinterpret_cast<const protocol::NOTICE_INVENTORY_UPDATE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_NOTICE_INVENTORY_DELETED: {
      auto ptr = reinterpret_cast<const protocol::NOTICE_INVENTORY_DELETED *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_REQUEST_ITEM_BREAK: {
      auto ptr = reinterpret_cast<const protocol::REQUEST_ITEM_BREAK *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_RESPONSE_ITEM_BREAK: {
      auto ptr = reinterpret_cast<const protocol::RESPONSE_ITEM_BREAK *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_REQUEST_HEARTBEAT: {
      auto ptr = reinterpret_cast<const protocol::REQUEST_HEARTBEAT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_RESPONSE_HEARTBEAT: {
      auto ptr = reinterpret_cast<const protocol::RESPONSE_HEARTBEAT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMessageContentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessageContent(
        verifier,  values->Get(i), types->GetEnum<MessageContent>(i))) {
      return false;
    }
  }
  return true;
}

inline const protocol::MESSAGE_PROTOCOL *GetMESSAGE_PROTOCOL(const void *buf) {
  return ::flatbuffers::GetRoot<protocol::MESSAGE_PROTOCOL>(buf);
}

inline const protocol::MESSAGE_PROTOCOL *GetSizePrefixedMESSAGE_PROTOCOL(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<protocol::MESSAGE_PROTOCOL>(buf);
}

inline bool VerifyMESSAGE_PROTOCOLBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<protocol::MESSAGE_PROTOCOL>(nullptr);
}

inline bool VerifySizePrefixedMESSAGE_PROTOCOLBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<protocol::MESSAGE_PROTOCOL>(nullptr);
}

inline void FinishMESSAGE_PROTOCOLBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<protocol::MESSAGE_PROTOCOL> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMESSAGE_PROTOCOLBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<protocol::MESSAGE_PROTOCOL> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace protocol

#endif  // FLATBUFFERS_GENERATED_MESSAGEPROTOCOL_PROTOCOL_H_
