// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGINSERVERPROTOCOL_PROTOCOL_H_
#define FLATBUFFERS_GENERATED_LOGINSERVERPROTOCOL_PROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace protocol {

struct REQUEST_CONNECT;
struct REQUEST_CONNECTBuilder;

struct RESPONSE_CONNECT;
struct RESPONSE_CONNECTBuilder;

struct LOGINSERVER_PROTOCOL;
struct LOGINSERVER_PROTOCOLBuilder;

enum MESSAGETYPE : int32_t {
  MESSAGETYPE_BEGIN = 0,
  MESSAGETYPE_REQUEST_CONNECT = 1,
  MESSAGETYPE_RESPONSE_CONNECT = 2,
  MESSAGETYPE_END = 3,
  MESSAGETYPE_MIN = MESSAGETYPE_BEGIN,
  MESSAGETYPE_MAX = MESSAGETYPE_END
};

inline const MESSAGETYPE (&EnumValuesMESSAGETYPE())[4] {
  static const MESSAGETYPE values[] = {
    MESSAGETYPE_BEGIN,
    MESSAGETYPE_REQUEST_CONNECT,
    MESSAGETYPE_RESPONSE_CONNECT,
    MESSAGETYPE_END
  };
  return values;
}

inline const char * const *EnumNamesMESSAGETYPE() {
  static const char * const names[5] = {
    "BEGIN",
    "REQUEST_CONNECT",
    "RESPONSE_CONNECT",
    "END",
    nullptr
  };
  return names;
}

inline const char *EnumNameMESSAGETYPE(MESSAGETYPE e) {
  if (::flatbuffers::IsOutRange(e, MESSAGETYPE_BEGIN, MESSAGETYPE_END)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMESSAGETYPE()[index];
}

enum MessageContent : uint8_t {
  MessageContent_NONE = 0,
  MessageContent_REQUEST_CONNECT = 1,
  MessageContent_RESPONSE_CONNECT = 2,
  MessageContent_MIN = MessageContent_NONE,
  MessageContent_MAX = MessageContent_RESPONSE_CONNECT
};

inline const MessageContent (&EnumValuesMessageContent())[3] {
  static const MessageContent values[] = {
    MessageContent_NONE,
    MessageContent_REQUEST_CONNECT,
    MessageContent_RESPONSE_CONNECT
  };
  return values;
}

inline const char * const *EnumNamesMessageContent() {
  static const char * const names[4] = {
    "NONE",
    "REQUEST_CONNECT",
    "RESPONSE_CONNECT",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageContent(MessageContent e) {
  if (::flatbuffers::IsOutRange(e, MessageContent_NONE, MessageContent_RESPONSE_CONNECT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageContent()[index];
}

template<typename T> struct MessageContentTraits {
  static const MessageContent enum_value = MessageContent_NONE;
};

template<> struct MessageContentTraits<protocol::REQUEST_CONNECT> {
  static const MessageContent enum_value = MessageContent_REQUEST_CONNECT;
};

template<> struct MessageContentTraits<protocol::RESPONSE_CONNECT> {
  static const MessageContent enum_value = MessageContent_RESPONSE_CONNECT;
};

bool VerifyMessageContent(::flatbuffers::Verifier &verifier, const void *obj, MessageContent type);
bool VerifyMessageContentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct REQUEST_CONNECT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef REQUEST_CONNECTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOGIN_ID = 4
  };
  const ::flatbuffers::String *login_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LOGIN_ID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LOGIN_ID) &&
           verifier.VerifyString(login_id()) &&
           verifier.EndTable();
  }
};

struct REQUEST_CONNECTBuilder {
  typedef REQUEST_CONNECT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_login_id(::flatbuffers::Offset<::flatbuffers::String> login_id) {
    fbb_.AddOffset(REQUEST_CONNECT::VT_LOGIN_ID, login_id);
  }
  explicit REQUEST_CONNECTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<REQUEST_CONNECT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<REQUEST_CONNECT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<REQUEST_CONNECT> CreateREQUEST_CONNECT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> login_id = 0) {
  REQUEST_CONNECTBuilder builder_(_fbb);
  builder_.add_login_id(login_id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<REQUEST_CONNECT> CreateREQUEST_CONNECTDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *login_id = nullptr) {
  auto login_id__ = login_id ? _fbb.CreateString(login_id) : 0;
  return protocol::CreateREQUEST_CONNECT(
      _fbb,
      login_id__);
}

struct RESPONSE_CONNECT FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RESPONSE_CONNECTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOGIN_ID = 4,
    VT_ID_NEW = 6,
    VT_AUTH_TOKEN = 8,
    VT_LOBY_PORT = 10
  };
  const ::flatbuffers::String *login_id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LOGIN_ID);
  }
  bool id_new() const {
    return GetField<uint8_t>(VT_ID_NEW, 0) != 0;
  }
  const ::flatbuffers::String *auth_token() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AUTH_TOKEN);
  }
  int32_t loby_port() const {
    return GetField<int32_t>(VT_LOBY_PORT, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LOGIN_ID) &&
           verifier.VerifyString(login_id()) &&
           VerifyField<uint8_t>(verifier, VT_ID_NEW, 1) &&
           VerifyOffset(verifier, VT_AUTH_TOKEN) &&
           verifier.VerifyString(auth_token()) &&
           VerifyField<int32_t>(verifier, VT_LOBY_PORT, 4) &&
           verifier.EndTable();
  }
};

struct RESPONSE_CONNECTBuilder {
  typedef RESPONSE_CONNECT Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_login_id(::flatbuffers::Offset<::flatbuffers::String> login_id) {
    fbb_.AddOffset(RESPONSE_CONNECT::VT_LOGIN_ID, login_id);
  }
  void add_id_new(bool id_new) {
    fbb_.AddElement<uint8_t>(RESPONSE_CONNECT::VT_ID_NEW, static_cast<uint8_t>(id_new), 0);
  }
  void add_auth_token(::flatbuffers::Offset<::flatbuffers::String> auth_token) {
    fbb_.AddOffset(RESPONSE_CONNECT::VT_AUTH_TOKEN, auth_token);
  }
  void add_loby_port(int32_t loby_port) {
    fbb_.AddElement<int32_t>(RESPONSE_CONNECT::VT_LOBY_PORT, loby_port, 0);
  }
  explicit RESPONSE_CONNECTBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RESPONSE_CONNECT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RESPONSE_CONNECT>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RESPONSE_CONNECT> CreateRESPONSE_CONNECT(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> login_id = 0,
    bool id_new = false,
    ::flatbuffers::Offset<::flatbuffers::String> auth_token = 0,
    int32_t loby_port = 0) {
  RESPONSE_CONNECTBuilder builder_(_fbb);
  builder_.add_loby_port(loby_port);
  builder_.add_auth_token(auth_token);
  builder_.add_login_id(login_id);
  builder_.add_id_new(id_new);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RESPONSE_CONNECT> CreateRESPONSE_CONNECTDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *login_id = nullptr,
    bool id_new = false,
    const char *auth_token = nullptr,
    int32_t loby_port = 0) {
  auto login_id__ = login_id ? _fbb.CreateString(login_id) : 0;
  auto auth_token__ = auth_token ? _fbb.CreateString(auth_token) : 0;
  return protocol::CreateRESPONSE_CONNECT(
      _fbb,
      login_id__,
      id_new,
      auth_token__,
      loby_port);
}

struct LOGINSERVER_PROTOCOL FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LOGINSERVER_PROTOCOLBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_TYPE = 4,
    VT_CONTENT_TYPE = 6,
    VT_CONTENT = 8
  };
  protocol::MESSAGETYPE message_type() const {
    return static_cast<protocol::MESSAGETYPE>(GetField<int32_t>(VT_MESSAGE_TYPE, 0));
  }
  protocol::MessageContent content_type() const {
    return static_cast<protocol::MessageContent>(GetField<uint8_t>(VT_CONTENT_TYPE, 0));
  }
  const void *content() const {
    return GetPointer<const void *>(VT_CONTENT);
  }
  template<typename T> const T *content_as() const;
  const protocol::REQUEST_CONNECT *content_as_REQUEST_CONNECT() const {
    return content_type() == protocol::MessageContent_REQUEST_CONNECT ? static_cast<const protocol::REQUEST_CONNECT *>(content()) : nullptr;
  }
  const protocol::RESPONSE_CONNECT *content_as_RESPONSE_CONNECT() const {
    return content_type() == protocol::MessageContent_RESPONSE_CONNECT ? static_cast<const protocol::RESPONSE_CONNECT *>(content()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MESSAGE_TYPE, 4) &&
           VerifyField<uint8_t>(verifier, VT_CONTENT_TYPE, 1) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           VerifyMessageContent(verifier, content(), content_type()) &&
           verifier.EndTable();
  }
};

template<> inline const protocol::REQUEST_CONNECT *LOGINSERVER_PROTOCOL::content_as<protocol::REQUEST_CONNECT>() const {
  return content_as_REQUEST_CONNECT();
}

template<> inline const protocol::RESPONSE_CONNECT *LOGINSERVER_PROTOCOL::content_as<protocol::RESPONSE_CONNECT>() const {
  return content_as_RESPONSE_CONNECT();
}

struct LOGINSERVER_PROTOCOLBuilder {
  typedef LOGINSERVER_PROTOCOL Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_message_type(protocol::MESSAGETYPE message_type) {
    fbb_.AddElement<int32_t>(LOGINSERVER_PROTOCOL::VT_MESSAGE_TYPE, static_cast<int32_t>(message_type), 0);
  }
  void add_content_type(protocol::MessageContent content_type) {
    fbb_.AddElement<uint8_t>(LOGINSERVER_PROTOCOL::VT_CONTENT_TYPE, static_cast<uint8_t>(content_type), 0);
  }
  void add_content(::flatbuffers::Offset<void> content) {
    fbb_.AddOffset(LOGINSERVER_PROTOCOL::VT_CONTENT, content);
  }
  explicit LOGINSERVER_PROTOCOLBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LOGINSERVER_PROTOCOL> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LOGINSERVER_PROTOCOL>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LOGINSERVER_PROTOCOL> CreateLOGINSERVER_PROTOCOL(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    protocol::MESSAGETYPE message_type = protocol::MESSAGETYPE_BEGIN,
    protocol::MessageContent content_type = protocol::MessageContent_NONE,
    ::flatbuffers::Offset<void> content = 0) {
  LOGINSERVER_PROTOCOLBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_message_type(message_type);
  builder_.add_content_type(content_type);
  return builder_.Finish();
}

inline bool VerifyMessageContent(::flatbuffers::Verifier &verifier, const void *obj, MessageContent type) {
  switch (type) {
    case MessageContent_NONE: {
      return true;
    }
    case MessageContent_REQUEST_CONNECT: {
      auto ptr = reinterpret_cast<const protocol::REQUEST_CONNECT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageContent_RESPONSE_CONNECT: {
      auto ptr = reinterpret_cast<const protocol::RESPONSE_CONNECT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMessageContentVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessageContent(
        verifier,  values->Get(i), types->GetEnum<MessageContent>(i))) {
      return false;
    }
  }
  return true;
}

inline const protocol::LOGINSERVER_PROTOCOL *GetLOGINSERVER_PROTOCOL(const void *buf) {
  return ::flatbuffers::GetRoot<protocol::LOGINSERVER_PROTOCOL>(buf);
}

inline const protocol::LOGINSERVER_PROTOCOL *GetSizePrefixedLOGINSERVER_PROTOCOL(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<protocol::LOGINSERVER_PROTOCOL>(buf);
}

inline bool VerifyLOGINSERVER_PROTOCOLBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<protocol::LOGINSERVER_PROTOCOL>(nullptr);
}

inline bool VerifySizePrefixedLOGINSERVER_PROTOCOLBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<protocol::LOGINSERVER_PROTOCOL>(nullptr);
}

inline void FinishLOGINSERVER_PROTOCOLBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<protocol::LOGINSERVER_PROTOCOL> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedLOGINSERVER_PROTOCOLBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<protocol::LOGINSERVER_PROTOCOL> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace protocol

#endif  // FLATBUFFERS_GENERATED_LOGINSERVERPROTOCOL_PROTOCOL_H_
